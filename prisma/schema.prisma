// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model News {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  author        Author    @relation("WrittenNews", fields: [authorId], references: [nickname])
  title         String
  subtitle      String
  category      String
  content       String
  end_text      String?
  image         String?
  image_credits String?
  link          String?
  created_at    DateTime  @default(now())
  updated_at    DateTime? @default(now())
  authorId      String

  @@map("news")
}

model Reviews {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  author     Author    @relation("WrittenReviews", fields: [authorId], references: [nickname])
  category   String
  title      String
  subtitle   String
  content    String
  created_at DateTime  @default(now())
  updated_at DateTime? @default(now())
  authorId   String

  @@map("reviews")
}

model Quiz {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  author        Author    @relation("WrittenQuizzes", fields: [authorId], references: [nickname])
  title         String
  content       String
  first_option  String
  second_option String
  third_option  String?
  fourth_option String?
  fifth_option  String?
  selectedBy    Reader    @relation("SelectedOption", fields: [readerId], references: [nickname])
  readerId      String
  authorId      String
  created_at    DateTime  @default(now())
  updated_at    DateTime? @default(now())

  @@map("quizzes")
}

model Discussion {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  author     Author     @relation("WrittenDiscussions", fields: [authorId], references: [nickname])
  category   String
  title      String
  content    String
  authorId   String
  comments   Comments[] @relation("CommentsPosted")
  created_at DateTime   @default(now())
  updated_at DateTime?  @default(now())

  @@map("discussions")
}

model Comments {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  author        Reader     @relation("DiscussionComments", fields: [readerId], references: [nickname])
  commentPosted Discussion @relation("CommentsPosted", fields: [discussionId], references: [id])
  discussionId  String     @db.ObjectId
  readerId      String
  created_at    DateTime   @default(now())
  updated_at    DateTime?  @default(now())
}

model Author {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  nickname          String       @unique
  email             String       @unique
  image             String?
  intagram_link     String?
  twitter_link      String?
  youtube_link      String?
  github_link       String?
  reddit_link       String?
  twitch_link       String?
  created_at        DateTime     @default(now())
  updated_at        DateTime     @default(now())
  writtenNews       News[]       @relation("WrittenNews")
  writtenReviews    Reviews[]    @relation("WrittenReviews")
  writtenQuiz       Quiz[]       @relation("WrittenQuizzes")
  writtenDiscussion Discussion[] @relation("WrittenDiscussions")

  @@map("authors")
}

model ContactMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  email      String
  subject    String
  message    String
  created_at DateTime @default(now())
  update_at  DateTime @default(now())

  @@map("contactMessage")
}

model Reader {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  nickname   String   @unique
  email      String
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  selectedOption    Quiz[]     @relation("SelectedOption")
  discussionComment Comments[] @relation("DiscussionComments")

  @@map("readers")
}
